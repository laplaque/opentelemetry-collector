# OpenTelemetry Collector Test Suite Configuration
receivers:
  # OTLP gRPC Receiver - configurable port and TLS
  otlp/grpc:
    endpoint: "0.0.0.0:${OTLP_GRPC_PORT:-4317}"
    tls:
      cert_file: ${TLS_CERT_FILE:-}
      key_file: ${TLS_KEY_FILE:-}
      
  # OTLP HTTP Receiver - configurable port and TLS  
  otlp/http:
    endpoint: "0.0.0.0:${OTLP_HTTP_PORT:-4318}"
    tls:
      cert_file: ${TLS_CERT_FILE:-}
      key_file: ${TLS_KEY_FILE:-}

  # Optional: Prometheus receiver for testing metric scraping
  prometheus:
    config:
      scrape_configs:
        - job_name: 'test-metrics'
          static_configs:
            - targets: ['localhost:${PROMETHEUS_PORT:-8889}']

processors:
  batch:
    timeout: 1s
    send_batch_size: 1024
    
  memory_limiter:
    limit_mib: 512
    
  resource:
    attributes:
      - key: test.collector.name
        value: "otel-testsuite"
        action: insert

exporters:
  # File exporter for test verification
  file:
    path: "${OUTPUT_DIR:-./test-output}/metrics.json"
    
  # Console exporter for debugging
  logging:
    loglevel: ${LOG_LEVEL:-info}
    
  # Prometheus exporter for metrics inspection
  prometheus:
    endpoint: "0.0.0.0:${PROMETHEUS_EXPORT_PORT:-8889}"
    
  # Optional: Forward to real backend
  otlp/forward:
    endpoint: "${FORWARD_ENDPOINT:-}"
    insecure: ${FORWARD_INSECURE:-true}

service:
  pipelines:
    traces:
      receivers: [otlp/grpc, otlp/http]
      processors: [memory_limiter, batch, resource]
      exporters: [file, logging]
      
    metrics:
      receivers: [otlp/grpc, otlp/http, prometheus]
      processors: [memory_limiter, batch, resource]
      exporters: [file, logging, prometheus]
      
  extensions: [health_check]

extensions:
  health_check:
    endpoint: "0.0.0.0:${HEALTH_CHECK_PORT:-13133}"
